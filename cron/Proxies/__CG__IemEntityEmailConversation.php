<?php

namespace Proxy\__CG__\Iem\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EmailConversation extends \Iem\Entity\EmailConversation implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getSubject()
    {
        $this->__load();
        return parent::getSubject();
    }

    public function getEmailA()
    {
        $this->__load();
        return parent::getEmailA();
    }

    public function getEmailB()
    {
        $this->__load();
        return parent::getEmailB();
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function getIsResponded()
    {
        $this->__load();
        return parent::getIsResponded();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function setSubject($subject)
    {
        $this->__load();
        return parent::setSubject($subject);
    }

    public function setEmailA($emailA)
    {
        $this->__load();
        return parent::setEmailA($emailA);
    }

    public function setEmailB($emailB)
    {
        $this->__load();
        return parent::setEmailB($emailB);
    }

    public function setState($state)
    {
        $this->__load();
        return parent::setState($state);
    }

    public function setIsResponded($isResponded)
    {
        $this->__load();
        return parent::setIsResponded($isResponded);
    }

    public function getScheduleSendingEmail()
    {
        $this->__load();
        return parent::getScheduleSendingEmail();
    }

    public function setScheduleSendingEmail($ScheduleSendingEmail)
    {
        $this->__load();
        return parent::setScheduleSendingEmail($ScheduleSendingEmail);
    }

    public function getDeleted()
    {
        $this->__load();
        return parent::getDeleted();
    }

    public function setDeleted($deleted)
    {
        $this->__load();
        return parent::setDeleted($deleted);
    }

    public function getInputFilter()
    {
        $this->__load();
        return parent::getInputFilter();
    }

    public function setInputFilter(\Zend\InputFilter\InputFilterInterface $inputFilter)
    {
        $this->__load();
        return parent::setInputFilter($inputFilter);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function setCreatedBy($createdBy)
    {
        $this->__load();
        return parent::setCreatedBy($createdBy);
    }

    public function getLastUpdatedBy()
    {
        $this->__load();
        return parent::getLastUpdatedBy();
    }

    public function setLastUpdatedBy($lastUpdatedBy)
    {
        $this->__load();
        return parent::setLastUpdatedBy($lastUpdatedBy);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function toArray($object = NULL)
    {
        $this->__load();
        return parent::toArray($object);
    }

    public function fromArray(array $data)
    {
        $this->__load();
        return parent::fromArray($data);
    }

    public function __call($method, $args)
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function __get($property)
    {
        $this->__load();
        return parent::__get($property);
    }

    public function __set($property, $value)
    {
        $this->__load();
        return parent::__set($property, $value);
    }

    public function exchangeArray(array $data)
    {
        $this->__load();
        return parent::exchangeArray($data);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'subject', 'emailA', 'emailB', 'isResponded', 'deleted', 'createdAt', 'updatedAt', 'state', 'ScheduleSendingEmail', 'createdBy', 'lastUpdatedBy');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}